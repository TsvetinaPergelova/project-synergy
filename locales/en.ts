// filepath: locales/en.ts
export const en = {
  common: {
    login: "Login",
    register: "Register",
    english: "English",
    bulgarian: "Български",
    user: "User",
    password: "Password",
    emailAddress: "Email address",
    requiredFieldsHint: "Required fields",
    error: "Error",
    success: "Success",
  },
  header: {
    logoAlt: "Fibank Logo",
    toSite: "To Site",
    mobileApp: "Mobile App",
    tariffChanges: "Tariff Changes",
    help: "Help",
  },
  sidebar: {
    months: {
      jan: "January",
      feb: "February",
      mar: "March",
      apr: "April",
      may: "May",
      jun: "June",
      jul: "July",
      aug: "August",
      sep: "September",
      oct: "October",
      nov: "November",
      dec: "December",
    },
    accountingDate: "Accounting Date",
    userAvatarAlt: "User Avatar",
    client: "Client",
    newTransferIconAlt: "New Transfer",
    newTransferButton: "NEW TRANSFER",
    homeIconAlt: "Home",
    nav: {
      home: "Home",
      accountsIconAlt: "Accounts Icon",
      accounts: "Accounts",
      depositsIconAlt: "Deposits Icon",
      deposits: "Deposits",
      creditsIconAlt: "Cards Icon",
      cards: "Cards",
      transfersForSigningIconAlt: "Transfers for Signing Icon",
      transfersForSigning: "Transfers for Signing",
      orderedDocumentsIconAlt: "Ordered Documents Icon",
      orderedDocuments: "Ordered Documents",
    },
    fibankInfo: {
      branches: "Branches",
      atms: "ATMs",
      currencyRates: "Currency Rates",
      title: "FIBANK INFO",
      toggleAlt: "Toggle Fibank Info",
      news: "News",
      newsIconAlt: "News Icon",
      promotions: "Promotions",
    },
    additional: {
      title: "Additional",
      toggleAlt: "Toggle",
      help: "Help",
      helpIconAlt: "Help Icon",
    },
    contact: {
      questions: "Do you have questions and need help?",
      phoneIconAlt: "Phone Icon",
      emailIconAlt: "Email Icon",
      chatIconAlt: "Chat Icon",
      onlineChat: "Online Chat",
      callWomanIconAlt: "Call Woman Icon",
    },
    flyout: {
      reports: {
        posTransactionsGroups: "POS transactions - by groups",
        posTransactionsPeriod: "POS transactions for the period",
        ssoBalances: "Balances on all SSO accounts",
        dailyBudgetReport: "Daily report for budget authorizing officer",
        clientServicesPerformed: "Services performed for a client",
        sentSmsNotifications: "Sent SMS notifications ",
        dueFees: "Fees due",
        swiftTransfers: "SWIFT transfers",
        sessions: "Sessions",
        title: "Reports",
      },
      payments: {
        headerTransfers: "TRANSACTIONS",
        newCreditTransfer: "New Credit Transfer",
        budgetPayment: "Payment from/to the budget",
        directDebit: "Direct Debit",
        massTransfer: "Mass Transfer",
        fileTransfers: "File Transfers",
        newPeriodicTransfer: "New Periodic Transfer",
        sebraPayments: "SEBRA Payments",
        suCreditTransfer: "SU Credit Transfer",
        suInternalTransfer: "SU Internal Transfer",
        headerCurrencyExchange: "BUYING/SELLING CURRENCY",
        currencyBuySell: "Buying/Selling Currency",
        negotiateRate: "Negotiate Rate",
        headerRegisters: "REGISTERS",
        periodicTransfersRegister: "Periodic Transfers Register",
        transferRecipients: "Transfer Recipients",
        title: "Payments",
      },
      statements: {
        accountStatement: "Account Statement",
        creditCardStatement: "Credit Card Statement",
        title: "Statements",
      },
      services: {
        emailAccountReports: "Email Account Reports",
        emailCardStatements: "Email Card Statements",
        emailCardAuthorizations: "Email Card Authorizations",
        emailSwiftTransfers: "Email SWIFT Transfers",
        title: "Services",
      },
      utilities: {
        headerDebtPayments: "DEBT PAYMENTS",
        pendingDebts: "Pending Debts",
        payDebts: "Pay Debts",
        payMunicipalTaxes: "Pay Municipal Taxes",
        oneTimePayment: " One-Time Payment",
        headerSubscriptionAccounts: " SUBSCRIPTION ACCOUNTS",
        addSubscriptionAccount: "Add Subscription Account",
        registeredSubscriptionAccounts: "Registered Subscription Accounts",
        headerOther: "OTHERS",
        emailNotifications: "Email Notifications",
        paymentHistory: "Payment History",
        title: "Utilities",
      },
      declarations: {
        noiDeclaration: "NOI Declaration",
        statForm100k: "Statistical Form 100k",
        originOfFunds: "Origin of Funds",
        crossBorderTransfers: " Cross-Border Transfers",
        title: "Declarations",
      },
    },
  },
  dashboardHeader: {
    //notificationsDropdown: "You have 3 new notifications",
    menu: "MENU",
    messages: "MESSAGES",
    notifications: "NOTIFICATIONS",
    settings: "SETTINGS",
    logout: "LOGOUT",
    toggleMenuAriaLabel: "Toggle menu",
    messagesAlt: "User messages",
    notificationsAlt: "Notifications",
    toggleNotificationsAriaLabel: "Toggle notifications menu",
    toggleSubmenuAlt: "Toggle submenu",
    settingsAlt: "Settings",
    toggleSettingsAriaLabel: "Toggle settings menu",
    userAvatarAlt: "User avatar",
    toggleProfileAriaLabel: "Toggle profile menu",
    logoutAlt: "Logout",
    settingsMenuItems: {
      personalData: "Personal Data",
      generalSettings: "General Settings",
      /* more settings..*/
      mobileAppFibank: "Fibank Mobile App",
    },
    notificationsItems: {
      failedTransferTitle: "Failed Transfer",
      failedTransferDesc: "Transfer to recipient NSSI was not completed...",
      /* more notifications..*/
      creditRepaymentDesc: "5 days left to pay the installment on the loan...",
    },
    notificationsDropdown: {
      titleDynamic: "You have {{count}} new notifications",
      viewAll: "View All",
    },
    profileDropdown: {
      userLabel: "User:",
      clientLabel: "Client:",
      selectOtherClient: "Select Other Client",
    },
  },
  loginPage: {
    sslCertificateBy: "Secure login with SSL certificate from:",
    title: "Virtual Banking Branch (e-fibank)",
    loginButton: "LOGIN",
    securityAdvice: "Security Advice",
    errorMessagesLink: "Error Messages",
    important: "IMPORTANT!",
    exploreSystem: "Explore the System",
    demoVersion: "DEMO VERSION",
    tokenBanking: "Token Banking",
    toastSuccess: "Login successful!",
    toastLoginFailed: "Login failed: ",
    toastLoginGenericError: "An error occurred during login. Please try again.",
    validationUserNameRequired: "Username is required",
    validationInvalidEmail: "Invalid email address",
    validationPasswordRequired: "Password is required",
    validationPasswordMinLength: "Password must be at least 10 characters",
    validationPasswordPattern:
      "Password must be at least 10 characters and contain at least one lowercase letter, one uppercase letter, and one digit",
    importantCard: {
      title: "IMPORTANT!",
      text: "FIB AD NOTIFIES ITS CARDHOLDERS that there is information about fake e-mail messages received, which...",
      link: "Read more",
    },
    exploreSystemCard: {
      title: "Explore the system",
      text: "Explore and experience online banking through our interactive demo version.",
      link: "DEMO VERSION",
    },
    tokenBankingCard: {
      title: "Token Banking",
      text: "Mobility, convenience and security in one, with our Token device for generating one-time login passwords.",
      link: "Learn more",
    },
  },
  registerPage: {
    // Validation messages (assuming these are correctly structured and used)
    validation: {
      egnRequired: "Personal ID (EGN) is required",
      egnPattern: "Personal ID (EGN) must be exactly 10 digits",
      nameCyrillicRequired: "Name in Cyrillic is required",
      nameCyrillicPattern: "Name must contain only Cyrillic letters",
      nameLatinRequired: "Name in Latin is required",
      nameLatinPattern: "Name must contain only Latin letters",
      emailRequired: "Email is required",
      emailPattern: "Invalid email address", // Changed from emailInvalid to match page.tsx usage
      phoneRequired: "Phone is required",
      addressRequired: "Address is required",
      usernameRequired: "Username is required",
      usernamePattern:
        "Allowed characters are Latin letters, numbers, '.', '_' or '-'.",
      usernameNoCyrillic: "Cyrillic characters are not allowed!",
      passwordRequired: "Password is required",
      passwordMinLength: "Password must be at least 10 characters",
      // Changed from passwordPatternMessage to match page.tsx usage
      passwordPattern:
        "Password must contain at least one lowercase letter, one uppercase letter, and one digit",
      repeatPasswordRequired: "Repeat password is required",
      passwordsNoMatch: "Passwords do not match",
    },
    infoParagraph1:
      "This registration form is completed only if you do not have a username and password for the Virtual Bank Branch (e-fibank) of Fibank. If you already have a username and password, adding access to a new individual or legal entity is done at the bank. If you have forgotten your username and/or password, please visit the bank to obtain them.",
    infoParagraph2:
      "You need to remember the username and password you justYou need to remember your username and password that you just entered. After you confirm your registration with the bank, they will be used to log in to the Virtual Bank Branch (e-fibank).",
    title: "New User Registration",
    formDescription:
      "This registration form is filled out only if you do not have a username and password for the Virtual Banking Branch (e-fibank)...",
    egnLabel: "* Personal ID (EGN):",
    egnPlaceholder: "8701206763",
    egnRequired: "Personal ID (EGN) is required",
    egnPattern: "Personal ID (EGN) must be exactly 10 digits",
    lnchLabel: "LNCH or Passport:",
    nameCyrillicLabel: "* Name and surname in Cyrillic:",
    nameCyrillicRequired: "Name in Cyrillic is required",
    nameCyrillicPattern: "Name must contain only Cyrillic letters",
    nameLatinLabel: "* Name and surname in Latin:",
    nameLatinRequired: "Name in Latin is required",
    nameLatinPattern: "Name must contain only Latin letters",
    emailLabel: "* E-mail:",
    emailRequired: "Email is required",
    emailInvalid: "Invalid email address",
    phoneLabel: "* Phone:",
    phoneRequired: "Phone is required",
    addressLabel: "* Address:",
    addressRequired: "Address is required",
    usernameLabel: "* Username:",
    usernamePlaceholder: "philip_philipov",
    usernameRequired: "Username is required",
    usernamePattern:
      "Allowed characters are Latin letters, numbers, '.', '_' or '-'.",
    usernameNoCyrillic: "Cyrillic characters are not allowed!",
    passwordLabel: "* Password:",
    passwordPlaceholder: "••••••••",
    passwordRequired: "Password is required",
    passwordMinLength: "Password must be at least 10 characters",
    passwordPatternMessage:
      "Password must contain at least one lowercase letter, one uppercase letter, and one digit",
    passwordStrengthTooWeak: "Password is too weak.",
    passwordStrengthWeak: "Password is weak.",
    passwordStrengthGood: "Password is good.",
    passwordStrengthStrong: "Password is strong.",
    passwordStrengthVeryStrong: "Password is very strong.",
    repeatPasswordLabel: "* Repeat Password:",
    repeatPasswordRequired: "Repeat password is required",
    passwordsNoMatch: "Passwords do not match",
    rememberCredentialsMessage:
      "You need to remember the username and password you just entered...",
    submitButton: "Send Registration Request",
    toastSuccess: "Registration successful! You can now log in.",
    toastRegisterFailed: "Registration failed: ",
    toastRegisterGenericError:
      "An error occurred during registration. Please try again.",
  },
  dashboardPage: {
    homeTitle: "Home",
    netAvailableBalance: "Net available balance in accounts and deposits:",
    totalCurrentBalance: "Total current balance in accounts and deposits:",
    totalNetCardAvailability: "Total net availability on card accounts:",
    accounts: "Accounts",
    forSigning: "FOR SIGNING",
    cards: "CARDS",
    pendingPayments: "PENDING PAYMENTS",
    last5Transfers: "LAST 5 TRANSFERS",
    credits: "CREDITS",
    deposits: "DEPOSITS",
    tableHeaderAccount: "Account",
    tableHeaderCurrency: "Currency",
    tableHeaderAvailability: "Availability",
    tableHeaderInitialBalance: "Initial Balance",
    tableHeaderCurrentBalance: "Current Balance",
    tableHeaderDueTaxes: "Due Taxes",
    tableHeaderActions: "Actions",
    altAccountType: "Account Type",
    selectAllForSigning: "Sellect All for Signing",
    tableHeaderPaymentType: "Payment Type",
    tableHeaderPayer: "Payer",
    tableHeaderReceiver: "Receiver",
    tableHeaderAmountAndCurrency: "Amount and Cyrrency",
    tooltipAdd: "tooltipAdd",
    tooltipEdit: "tooltipEdit",
    tooltipCancelAction: "Cancel Action",
    buttonSignSelected: "Sign",
    buttonToken: "TOKEN",
    buttonCancelSelected: "CANCEL",
    tableHeaderCard: "Card",
    tableHeaderAvailability2: "Availability",
    tableHeaderObligations: "Obligations",
    tableHeaderMinContribution: "Minimal Contribution",
    tableHeaderDueDate: "Due Date",
    tableHeader3DSecurity: "3D Security",
    buttonRepay: "REPAY",
    tableHeaderName: "Name",
    tableHeaderDateDue: "Date Due",
    tableHeaderAutoPayment: "Auto Payment",
    tableHeaderAmount: "Amount",
    buttonPay: "PAY",
    tableHeaderType: "Type",
    tableHeaderDate: "Date",
    tableHeaderRecipientPayer: "Recipient/Payer",
    tableHeaderInterestRate: " Interest Rate %",
    tableHeaderDueInstallment: "Due Installment",
    tableHeaderInstallmentDate: "Installment Date",
    tableHeaderMaturity: "Maturity",
    tableHeaderDeposit: "Deposit",
    tableHeaderAccruedInterest: "Accrued Interest",
    dashboardSection: {
      viewAll: "View all",
      settingsAlt: "Settings",
    },
  },
  footerLogin: {
    contactUs: "For all questions, our employees are waiting for you at:",
    phone: "Phone:",
    email: "E-mail:",
    chat: "Chat:",
    phoneAvailability: "24/7",
    writeToUs: "Write to us",
    vivacomNote:
      "* Calls to the national number 0700 12 777 are charged according to the rates set by your operator for calls to Vivacom's 0700 number. For Vivacom subscribers, a call to this number is charged as a call to a landline number in the Vivacom network.",
    locationsTitle: "See where we are located:",
    branches: "Branches ›",
    atms: "ATMs ›",
    addAccount: "How to add an account ›",
    sso: "Single Sign-On (SSO) ›",
    registrationProcess: "Registration Process ›",
    eSignature: "Electronic Signature ›",
    feesAndCommissions: "Fees and Commissions ›",
    documents: "Documents ›",
    copyright: "© First Investment Bank 2024-2025.",
  },
  footerRegister: {
    addAccount: "How to add an account ›",
    sso: "Single Sign-On (SSO) ›",
    registrationProcess: "Registration Process ›",
    eSignature: "Electronic Signature ›",
    feesAndCommissions: "Fees and Commissions ›",
    copyright: "© First Investment Bank 2024-2025.",
  },
  tableHeaderPaymentType: "Payment Type",
  tableHeaderPayer: "Payer",
  tableHeaderReceiver: "Receiver",
  tableHeaderAmountAndCurrency: "Amount & Currency",
  tooltipAdd: "Add",
  tooltipEdit: "Edit",
  tooltipCancelAction: "Cancel action",
  buttonSignSelected: "SIGN",
  buttonToken: "TOKEN",
  buttonCancelSelected: "CANCEL SELECTED",
  selectAllForSigning: "Select all for signing",
  selectTransaction: "Select transaction {{id}}",
  title: "New User Registration",
  // Renamed from formDescription to match page.tsx

  egnLabel: "* Personal ID (EGN):",
  egnPlaceholder: "8701206763", // Assuming this placeholder is fine as is, or add a key for it
  // egnRequired and egnPattern are used directly in page.tsx from registerPage.validation object
  lnchLabel: "LNCH or Passport:",
  nameCyrillicLabel: "* Name and surname in Cyrillic:",
  nameLatinLabel: "* Name and surname in Latin:",
  emailLabel: "* E-mail:",
  phoneLabel: "* Phone:",
  addressLabel: "* Address:",
  usernameLabel: "* Username:",
  usernamePlaceholder: "philip_philipov",
  passwordLabel: "* Password:",
  passwordPlaceholder: "••••••••", // Generic placeholder
  passwordStrengthTooWeak: "Password is too weak.",
  passwordStrengthWeak: "Password is weak.", // This key was in your file, ensure it's used or remove if redundant
  passwordStrengthGood: "Password is good.",
  passwordStrengthStrong: "Password is strong.",
  passwordStrengthVeryStrong: "Password is very strong.",
  repeatPasswordLabel: "* Repeat Password:",
  // Renamed from rememberCredentialsMessage to match page.tsx

  submitButton: "Send Registration Request",

  // Nested toast object to match t("registerPage.toast.key")
  toast: {
    registrationSuccess: "Registration successful! You can now log in.",
    registrationFailed: "Registration failed: {{message}}", // Added {{message}} for interpolation
    unknownError: "Unknown error", // New key
    genericError:
      "An error occurred during registration: {{message}}. Please try again.", // Added {{message}}
  },
};
